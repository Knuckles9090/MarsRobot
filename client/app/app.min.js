(function (){
  'use strict';

  //Defining app and adding dependencies
  angular.module('marsRobotApp',
    [
      'ui.router',
      'ngResource',
      'ngAnimate',
      'mgcrea.ngStrap'
    ]
  );
})();
(function(){
  'use strict';

  angular.module('marsRobotApp').config(['$resourceProvider', function($resourceProvider) {
    $resourceProvider.defaults.stripTrailingSlashes = true;
  }]);

  angular.module('marsRobotApp').config(['$locationProvider', function($locationProvider) {
    $locationProvider.html5Mode({
      enabled: true,
      requireBase: false
    });
  }]);

  //Defining states for the application
  angular.module('marsRobotApp').config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {

  // For any unmatched url, redirect to robot state
  $urlRouterProvider.otherwise(function($injector, $location){
    var $state = $injector.get('$state');
    $state.go('robot');
  });

    // Set up states/routes
    $stateProvider
    .state('robot', {
      url: '/robot',
      controller: 'robotController',
      templateUrl: 'app/components/robot/robot.tmpl.html'
    });
  }]);
}());
(function(){
  angular.module('marsRobotApp').directive('worldInput', function() {
    return {
      restrict: 'E',
      templateUrl: 'app/components/partials/worldInput.tmpl.html',
      scope: {
        worldSize: '='
      }
    };
  });
})();

(function(){
  angular.module('marsRobotApp').directive('locationInput', function() {
    return {
      restrict: 'E',
      templateUrl: 'app/components/partials/locationInput.tmpl.html',
      scope: {
        startLocation: '='
      }
    };
  });
})();

(function(){
  angular.module('marsRobotApp').directive('directionsInput', function() {
    return {
      restrict: 'E',
      templateUrl: 'app/components/partials/directionsInput.tmpl.html',
      scope: {
        directions: '='
      }
    };
  });
})();

(function(){
  angular.module('marsRobotApp').directive('upperCase', function() {
    return {
      require: 'ngModel',
      link: function(scope, element, attrs, modelCtrl) {
        function allCapitalized(modelValue) {
          if(modelValue === undefined) {
            modelValue = '';
          }
          var upperCase = modelValue.toUpperCase();
          if(upperCase !== modelValue) {
            modelCtrl.$setViewValue(upperCase);
            modelCtrl.$render();
          }
          return upperCase;
        }
        modelCtrl.$parsers.push(allCapitalized);
        allCapitalized(scope[attrs.ngModel]);  // capitalize initial value
      }
    };
  });
})();
(function(){
  'use strict';
  angular.module('marsRobotApp').factory('RobotFactory', function() {
    return function () {
      this.x = null;
      this.y = null;
      this.orientation = null;
      this.compass = 'NESW';
      this.memory = [];

      this.turnLeft = function () {
        this.orientation = this.compass[this.compass.indexOf(this.orientation) - 1] || 'W';
      };

      this.turnRight = function () {
        this.orientation = this.compass[this.compass.indexOf(this.orientation) + 1] || 'N';
      };

      this.forward = function () {
        this.previousLocation = {x: this.x, y: this.y, orientation: this.orientation};
        if (this.orientation === 'N') {
          if (this.moveIsSafe(this.x, this.y + 1)) {
            this.y = this.y + 1;
          }
        } else if (this.orientation === 'E') {
          if (this.moveIsSafe(this.x + 1, this.y)) {
            this.x = this.x + 1;
          }
        } else if (this.orientation === 'S') {
          if (this.moveIsSafe(this.x, this.y - 1)) {
            this.y = this.y - 1;
          }
        } else if (this.orientation === 'W') {
          if (this.moveIsSafe(this.x - 1, this.y)) {
            this.x = this.x - 1;
          }
        }
      };

      this.setLocationAndOrientation = function (locationAndOrientation) {
        this.x = parseInt(locationAndOrientation.split(',')[0]);
        this.y = parseInt(locationAndOrientation.split(',')[1].slice(0, -1));
        this.orientation = locationAndOrientation.slice(-1);
      };

      this.moveIsSafe = function (x, y) {
        var coordinates = [x, y];
        return !this.memory.some(function (c) {
          return c.every(function (element, index) {
            return element === coordinates[index];
          });
        });
      };

      this.hasSignal = function (grid) {
        if (this.x >= 0 && this.y >= 0 && this.x < grid.width && this.y < grid.height) {
          return true;
        } else {
          this.memory.push([this.x, this.y]);
          return false;
        }
      }
    };
  });
})();


(function(){
  'use strict';
  angular.module('marsRobotApp').factory('IntergalacticConsoleFactory', function() {
    return function () {
      this.message = 'Welcome to InterGalactic Console!\n';

      this.output = function () {
        return this.message.replace(/\n$/, '');
      };

      this.anotherOneBitesTheDustMessage = function (x, y, orientation) {
        this.message += 'Another robot bites the dust at: ' + x + ',' + y + orientation + 'LOST\n';
      };

      this.safeAndSoundMessage = function (x, y, orientation) {
        this.message += 'Robot safely arrived to: ' + x + ',' + y + orientation + '\n';
      };

      this.missPlacedRobot = function() {
        this.message += 'Misplaced robot, connection lost\n';
      }

    };
  });
})();

(function(){
  angular.module('marsRobotApp').factory('ImageResource', ['$resource', 'ResourcePath', function($resource, ResourcePath) {
    return $resource(ResourcePath+'/photos', {}, {
      'query': {
        method: 'GET',
        isArray: true
      }
    });
  }]);  
})();

/* Controller for the awesome Mars Robot */
(function(){
  'use strict';

  var robotController = function ($scope, RobotFactory, IntergalacticConsoleFactory) {

    $scope.initWorld = initWorld;
    $scope.runRobot = runRobot;
    $scope.getCellClass = getCellClass;
    $scope.robot = new RobotFactory();
    $scope.intergalacticConsole = new IntergalacticConsoleFactory();

    function initWorld (form, worldSize) {
      if (form.$valid) {
        $scope.directions = '';
        $scope.startLocation = '';
        $scope.robot = new RobotFactory();
        $scope.intergalacticConsole = new IntergalacticConsoleFactory();
        $scope.grid = parseGridSize(worldSize);
        $scope.columns = range($scope.grid.width);
        $scope.rows = range($scope.grid.height);
      }
    }

    function parseGridSize(worldSize) {
      return {
        width: parseInt(worldSize.split(',')[0]) + 1,
        height: parseInt(worldSize.split(',')[1]) + 1
      };
    }

    function runRobot(form, startLocation, directions) {
      var safeRobotJourney = true;
      if (startLocation && form.$valid) {
        $scope.robot.setLocationAndOrientation(startLocation);
        if ($scope.robot.hasSignal($scope.grid)) {
          for (var i = 0; i < directions.length; i++) {
            moveRobot(directions[i]);
            if (!$scope.robot.hasSignal($scope.grid)) {
              safeRobotJourney = false;
              break;
            }
          }
          if (safeRobotJourney) {
            $scope.intergalacticConsole.safeAndSoundMessage(
                $scope.robot.x,
                $scope.robot.y,
                $scope.robot.orientation
            );
          } else {
            $scope.intergalacticConsole.anotherOneBitesTheDustMessage(
                $scope.robot.previousLocation.x,
                $scope.robot.previousLocation.y,
                $scope.robot.previousLocation.orientation
            );
          }
        } else {
          $scope.intergalacticConsole.missPlacedRobot();
        }
      }
    }

    function moveRobot(direction) {
      if (direction === 'F') {
        $scope.robot.forward();
      } else if (direction === 'L') {
        $scope.robot.turnLeft();
      } else if (direction === 'R') {
        $scope.robot.turnRight();
      }
    }

    function getCellClass(row, column) {
      if ($scope.robot) {
        if ($scope.robot.x === row && $scope.robot.y === ($scope.grid.height - 1) - column) {
          return 'robot'
        }
      }
    }

    function range(count) {
      var values = [];
      for (var i = 0; i < count; i++) {
        values.push(i)
      }
      return values;
    }

  };

  robotController.$inject = ['$scope', 'RobotFactory', 'IntergalacticConsoleFactory'];
  angular.module('marsRobotApp').controller('robotController', robotController);

}());